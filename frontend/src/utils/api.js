// routes/api.js - API √∫tvonalak
const express = require('express');
const router = express.Router();

// Import modellek
const User = require('../models/User');
const GameState = require('../models/GameState');

// Term√©k adatok (a PDF-b≈ël)
const products = [
  // 1. C√≠mk√©zett adatcsomag
  { id: 1, weight: 150, color: 'Piros', size: 'Kicsi', category: 'Megfelel≈ë' },
  { id: 2, weight: 200, color: 'K√©k', size: 'Nagy', category: 'Selejt' },
  { id: 3, weight: 180, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë' },
  { id: 4, weight: 220, color: 'Piros', size: 'Nagy', category: 'Selejt' },
  { id: 5, weight: 160, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë' },

  // 2. C√≠mk√©zett adatcsomag
  { id: 6, weight: 300, color: 'Z√∂ld', size: 'Nagy', category: 'Selejt' },
  { id: 7, weight: 250, color: 'Piros', size: 'K√∂zepes', category: 'Megfelel≈ë' },
  { id: 8, weight: 270, color: 'K√©k', size: 'Kicsi', category: 'Selejt' },
  { id: 9, weight: 290, color: 'Z√∂ld', size: 'Nagy', category: 'Megfelel≈ë' },
  { id: 10, weight: 310, color: 'Piros', size: 'K√∂zepes', category: 'Megfelel≈ë' },

  // 3. C√≠mk√©zett adatcsomag
  { id: 11, weight: 120, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë' },
  { id: 12, weight: 140, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë' },
  { id: 13, weight: 130, color: 'Piros', size: 'Nagy', category: 'Selejt' },
  { id: 14, weight: 160, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë' },
  { id: 15, weight: 150, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Selejt' },

  // 4. C√≠mk√©zett adatcsomag
  { id: 16, weight: 210, color: 'Piros', size: 'Nagy', category: 'Selejt' },
  { id: 17, weight: 230, color: 'K√©k', size: 'Nagy', category: 'Megfelel≈ë' },
  { id: 18, weight: 220, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë' },
  { id: 19, weight: 240, color: 'Piros', size: 'Kicsi', category: 'Selejt' },
  { id: 20, weight: 200, color: 'K√©k', size: 'K√∂zepes', category: 'Megfelel≈ë' }
];

// Esem√©nyk√°rty√°k
const eventCards = [
  {
    id: 1,
    title: "Termel√©si el≈ërejelz√©s",
    type: "regression",
    cost: 10,
    message: "A selejt-felismer≈ë rendszer leny≈±g√∂z≈ë, de most a j√∂v≈ëbe akarunk l√°tni! Pontos el≈ërejelz√©st k√©r√ºnk a k√∂vetkez≈ë heti termel√©si darabsz√°mra a kapacit√°stervez√©shez. A siker kulcsa egy √∫j, predikt√≠v modell!",
    task: "Fektessetek be -10 Tanul√°si kreditet (TK) egy 'Regresszi√≥s modellbe', hogy teljes√≠ts√©tek a k√©r√©st! En√©lk√ºl a projekt hat√©konys√°ga jelent≈ësen cs√∂kken.",
    icon: "üìà",
    difficulty: "medium"
  },
  {
    id: 2,
    title: "Energiahat√©konys√°gi optimaliz√°l√°s",
    type: "regression", 
    cost: 10,
    message: "A p√©nz√ºgyi oszt√°ly riad√≥t f√∫jt a n√∂vekv≈ë energiak√∂lts√©gek miatt! El≈ërejelz√©st kell k√©sz√≠tenetek a g√©psorok v√°rhat√≥ energiafogyaszt√°s√°r√≥l, hogy optimaliz√°lni tudjuk a felhaszn√°l√°st. Csak egy numerikus becsl√©sre k√©pes modell seg√≠thet!",
    task: "A kih√≠v√°s teljes√≠t√©s√©hez aktiv√°lj√°tok a 'Regresszi√≥s modellt' -10 Tanul√°si kredit (TK) befektet√©s√©vel! En√©lk√ºl a gy√°r m≈±k√∂d√©se vesztes√©ges marad.",
    icon: "‚ö°",
    difficulty: "hard"
  },
  {
    id: 3,
    title: "Predikt√≠v karbantart√°s",
    type: "regression",
    cost: 10,
    message: "V√°ratlan g√©phiba √°ll√≠totta le a teljes 3-as gy√°rt√≥sort! A vezet√©s megel≈ëz≈ë megold√°st k√∂vetel. K√©sz√≠tsetek egy modellt, ami el≈ëre jelzi a kulcsfontoss√°g√∫ alkatr√©szek h√°tral√©v≈ë √©lettartam√°t √≥r√°ban kifejezve!",
    task: "Oldj√°tok fel a 'Regresszi√≥s modell' k√©pess√©get -10 Tanul√°si kredit√©rt (TK), hogy megel≈ëzz√©tek a j√∂v≈ëbeli le√°ll√°sokat! A gy√°r termel√©se √©s a h√≠rnev√ºnk m√∫lik rajta.",
    icon: "üîß",
    difficulty: "hard"
  },
  {
    id: 4,
    title: "K√©szletgazd√°lkod√°si kih√≠v√°s",
    type: "regression",
    cost: 10,
    message: "Az alapanyag-k√©szlet kritikusan alacsony, ami a termel√©s le√°ll√°s√°val fenyeget! A beszerz√©si oszt√°lynak pontos el≈ërejelz√©sre van sz√ºks√©ge a k√∂vetkez≈ë havi alapanyag-sz√ºks√©gletr≈ël. Az adatokban rejlik a megold√°s!",
    task: "Fektessetek be -10 Tanul√°si kreditet (TK) egy 'Regresszi√≥s modellbe' a pontos becsl√©shez! Ha kifogytok az alapanyagb√≥l, a k√ºldet√©s elbukik.",
    icon: "üì¶",
    difficulty: "medium"
  }
];

// Mem√≥ria alap√∫ adatt√°rol√°s (√©les k√∂rnyezetben adatb√°zis lenne)
let gameStates = new Map();

// GET /api/products - Term√©kadatok lek√©r√©se
router.get('/products', (req, res) => {
  try {
    const stats = {
      total: products.length,
      megfelel≈ë: products.filter(p => p.category === 'Megfelel≈ë').length,
      selejt: products.filter(p => p.category === 'Selejt').length
    };
    stats.selejtAr√°ny = ((stats.selejt / stats.total) * 100).toFixed(1);

    res.json({
      success: true,
      data: {
        products,
        stats
      },
      message: 'Term√©kadatok sikeresen lek√©rve'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a term√©kadatok lek√©r√©se sor√°n',
      message: error.message
    });
  }
});

// GET /api/event-cards - Esem√©nyk√°rty√°k lek√©r√©se
router.get('/event-cards', (req, res) => {
  try {
    res.json({
      success: true,
      data: eventCards,
      message: 'Esem√©nyk√°rty√°k sikeresen lek√©rve'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba az esem√©nyk√°rty√°k lek√©r√©se sor√°n',
      message: error.message
    });
  }
});

// GET /api/game-state/:userId - J√°t√©k√°llapot lek√©r√©se
router.get('/game-state/:userId', (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'Hi√°nyz√≥ userId param√©ter'
      });
    }

    const gameState = gameStates.get(userId) || GameState.getDefault();

    res.json({
      success: true,
      data: gameState,
      message: 'J√°t√©k√°llapot sikeresen lek√©rve'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a j√°t√©k√°llapot lek√©r√©se sor√°n',
      message: error.message
    });
  }
});

// POST /api/game-state/:userId - J√°t√©k√°llapot ment√©se
router.post('/game-state/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const gameState = req.body;

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'Hi√°nyz√≥ userId param√©ter'
      });
    }

    if (!GameState.validate(gameState)) {
      return res.status(400).json({
        success: false,
        error: '√ârv√©nytelen j√°t√©k√°llapot adatok'
      });
    }

    gameStates.set(userId, {
      ...gameState,
      lastUpdated: new Date().toISOString()
    });

    res.json({
      success: true,
      data: gameStates.get(userId),
      message: 'J√°t√©k√°llapot sikeresen mentve'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a j√°t√©k√°llapot ment√©se sor√°n',
      message: error.message
    });
  }
});

// POST /api/unlock-model - Modell felold√°sa
router.post('/unlock-model', (req, res) => {
  try {
    const { userId, modelType, cost } = req.body;

    if (!userId || !modelType || !cost) {
      return res.status(400).json({
        success: false,
        error: 'Hi√°nyz√≥ adatok: userId, modelType, cost sz√ºks√©ges'
      });
    }

    const gameState = gameStates.get(userId) || GameState.getDefault();

    // Ellen≈ërz√©sek
    if (gameState.unlockedModels.includes(modelType)) {
      return res.status(400).json({
        success: false,
        error: 'Ez a modell m√°r fel van oldva'
      });
    }

    if (gameState.credits < cost) {
      return res.status(400).json({
        success: false,
        error: 'Nincs elegend≈ë Tanul√°si kredit',
        required: cost,
        available: gameState.credits
      });
    }

    // El≈ëfelt√©tel ellen≈ërz√©se (regresszi√≥ csak klasszifik√°ci√≥ ut√°n)
    if (modelType === 'regression' && !gameState.unlockedModels.includes('classification')) {
      return res.status(400).json({
        success: false,
        error: 'El≈ëbb a klasszifik√°ci√≥s modellt kell feloldani'
      });
    }

    // Modell felold√°sa
    gameState.credits -= cost;
    gameState.unlockedModels.push(modelType);
    gameState.lastUpdated = new Date().toISOString();

    gameStates.set(userId, gameState);

    res.json({
      success: true,
      data: gameState,
      message: `${modelType} modell sikeresen feloldva`,
      modelUnlocked: modelType,
      creditsSpent: cost,
      remainingCredits: gameState.credits
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a modell felold√°sa sor√°n',
      message: error.message
    });
  }
});

// POST /api/complete-challenge - K√ºldet√©s teljes√≠t√©se
router.post('/complete-challenge', (req, res) => {
  try {
    const { userId, challengeId, cost, reward = 5 } = req.body;

    if (!userId || !challengeId || !cost) {
      return res.status(400).json({
        success: false,
        error: 'Hi√°nyz√≥ adatok: userId, challengeId, cost sz√ºks√©ges'
      });
    }

    const gameState = gameStates.get(userId) || GameState.getDefault();

    // Ellen≈ërz√©sek
    if (gameState.completedChallenges.includes(challengeId)) {
      return res.status(400).json({
        success: false,
        error: 'Ez a k√ºldet√©s m√°r teljes√≠tve van'
      });
    }

    if (!gameState.unlockedModels.includes('regression')) {
      return res.status(400).json({
        success: false,
        error: 'A regresszi√≥s modell sz√ºks√©ges a k√ºldet√©sek teljes√≠t√©s√©hez'
      });
    }

    if (gameState.credits < cost) {
      return res.status(400).json({
        success: false,
        error: 'Nincs elegend≈ë Tanul√°si kredit',
        required: cost,
        available: gameState.credits
      });
    }

    // K√ºldet√©s teljes√≠t√©se
    gameState.credits -= cost;
    gameState.credits += reward;
    gameState.completedChallenges.push(challengeId);
    gameState.lastUpdated = new Date().toISOString();

    gameStates.set(userId, gameState);

    res.json({
      success: true,
      data: gameState,
      message: 'K√ºldet√©s sikeresen teljes√≠tve',
      challengeCompleted: challengeId,
      creditsSpent: cost,
      creditsEarned: reward,
      netCredits: reward - cost,
      remainingCredits: gameState.credits
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a k√ºldet√©s teljes√≠t√©se sor√°n',
      message: error.message
    });
  }
});

// GET /api/leaderboard - Rangsor (opcion√°lis)
router.get('/leaderboard', (req, res) => {
  try {
    const leaderboard = Array.from(gameStates.entries()).map(([userId, state]) => ({
      userId: userId.substring(0, 8) + '...', // R√©szleges anonimiz√°l√°s
      teamName: state.teamName,
      credits: state.credits,
      unlockedModels: state.unlockedModels.length,
      completedChallenges: state.completedChallenges.length,
      score: state.credits + (state.unlockedModels.length * 20) + (state.completedChallenges.length * 10)
    })).sort((a, b) => b.score - a.score);

    res.json({
      success: true,
      data: leaderboard,
      message: 'Rangsor sikeresen lek√©rve'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a rangsor lek√©r√©se sor√°n',
      message: error.message
    });
  }
});

// DELETE /api/game-state/:userId - J√°t√©k√°llapot t√∂rl√©se (√∫jraind√≠t√°s)
router.delete('/game-state/:userId', (req, res) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'Hi√°nyz√≥ userId param√©ter'
      });
    }

    gameStates.delete(userId);

    res.json({
      success: true,
      message: 'J√°t√©k√°llapot sikeresen t√∂r√∂lve',
      data: GameState.getDefault()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Hiba a j√°t√©k√°llapot t√∂rl√©se sor√°n',
      message: error.message
    });
  }
});

module.exports = router;

// controllers/dataController.js - Adatkezel√©s √©s szolg√°ltat√°s
class DataController {

  // Term√©k adatok lek√©r√©se (20 term√©k a PDF-b≈ël)
  static async getProducts(req, res) {
    try {
      const { category, limit, offset, sortBy, order } = req.query;

      // A 20 term√©k adatai a PDF alapj√°n
      const products = [
        // 1. C√≠mk√©zett adatcsomag
        { id: 1, weight: 150, color: 'Piros', size: 'Kicsi', category: 'Megfelel≈ë', package: 1 },
        { id: 2, weight: 200, color: 'K√©k', size: 'Nagy', category: 'Selejt', package: 1 },
        { id: 3, weight: 180, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 1 },
        { id: 4, weight: 220, color: 'Piros', size: 'Nagy', category: 'Selejt', package: 1 },
        { id: 5, weight: 160, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë', package: 1 },

        // 2. C√≠mk√©zett adatcsomag
        { id: 6, weight: 300, color: 'Z√∂ld', size: 'Nagy', category: 'Selejt', package: 2 },
        { id: 7, weight: 250, color: 'Piros', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 2 },
        { id: 8, weight: 270, color: 'K√©k', size: 'Kicsi', category: 'Selejt', package: 2 },
        { id: 9, weight: 290, color: 'Z√∂ld', size: 'Nagy', category: 'Megfelel≈ë', package: 2 },
        { id: 10, weight: 310, color: 'Piros', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 2 },

        // 3. C√≠mk√©zett adatcsomag
        { id: 11, weight: 120, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë', package: 3 },
        { id: 12, weight: 140, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 3 },
        { id: 13, weight: 130, color: 'Piros', size: 'Nagy', category: 'Selejt', package: 3 },
        { id: 14, weight: 160, color: 'K√©k', size: 'Kicsi', category: 'Megfelel≈ë', package: 3 },
        { id: 15, weight: 150, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Selejt', package: 3 },

        // 4. C√≠mk√©zett adatcsomag
        { id: 16, weight: 210, color: 'Piros', size: 'Nagy', category: 'Selejt', package: 4 },
        { id: 17, weight: 230, color: 'K√©k', size: 'Nagy', category: 'Megfelel≈ë', package: 4 },
        { id: 18, weight: 220, color: 'Z√∂ld', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 4 },
        { id: 19, weight: 240, color: 'Piros', size: 'Kicsi', category: 'Selejt', package: 4 },
        { id: 20, weight: 200, color: 'K√©k', size: 'K√∂zepes', category: 'Megfelel≈ë', package: 4 }
      ];

      let filteredProducts = products;

      // Sz≈±r√©s kateg√≥ria alapj√°n
      if (category) {
        filteredProducts = filteredProducts.filter(product => 
          product.category.toLowerCase() === category.toLowerCase()
        );
      }

      // Rendez√©s
      if (sortBy) {
        const sortOrder = order === 'desc' ? -1 : 1;
        filteredProducts.sort((a, b) => {
          if (sortBy === 'weight') {
            return (a.weight - b.weight) * sortOrder;
          } else if (sortBy === 'id') {
            return (a.id - b.id) * sortOrder;
          } else if (sortBy === 'color' || sortBy === 'size' || sortBy === 'category') {
            return a[sortBy].localeCompare(b[sortBy]) * sortOrder;
          }
          return 0;
        });
      }

      // Lapoz√°s
      const startIndex = parseInt(offset) || 0;
      const limitNum = parseInt(limit) || filteredProducts.length;
      const paginatedProducts = filteredProducts.slice(startIndex, startIndex + limitNum);

      // Statisztik√°k sz√°m√≠t√°sa
      const statistics = {
        total: products.length,
        filtered: filteredProducts.length,
        megfelel≈ë: products.filter(p => p.category === 'Megfelel≈ë').length,
        selejt: products.filter(p => p.category === 'Selejt').length,
        colors: {
          piros: products.filter(p => p.color === 'Piros').length,
          k√©k: products.filter(p => p.color === 'K√©k').length,
          z√∂ld: products.filter(p => p.color === 'Z√∂ld').length
        },
        sizes: {
          kicsi: products.filter(p => p.size === 'Kicsi').length,
          k√∂zepes: products.filter(p => p.size === 'K√∂zepes').length,
          nagy: products.filter(p => p.size === 'Nagy').length
        },
        weightStats: {
          min: Math.min(...products.map(p => p.weight)),
          max: Math.max(...products.map(p => p.weight)),
          avg: Math.round(products.reduce((sum, p) => sum + p.weight, 0) / products.length)
        }
      };

      res.json({
        success: true,
        message: 'Term√©k adatok sikeresen lek√©rve',
        data: {
          products: paginatedProducts,
          pagination: {
            total: filteredProducts.length,
            limit: limitNum,
            offset: startIndex,
            hasMore: startIndex + limitNum < filteredProducts.length
          },
          statistics,
          filters: {
            category: category || null,
            sortBy: sortBy || null,
            order: order || 'asc'
          }
        }
      });

    } catch (error) {
      console.error('Hiba a term√©k adatok lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba a term√©k adatok lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }

  // Esem√©nyk√°rty√°k lek√©r√©se (4 k√°rtya a PDF alapj√°n)
  static async getEventCards(req, res) {
    try {
      const eventCards = [
        {
          id: 1,
          title: 'Termel√©si el≈ërejelz√©s',
          type: 'regression',
          cost: 10,
          reward: 5,
          difficulty: 'k√∂zepes',
          description: 'A selejt-felismer≈ë rendszer leny≈±g√∂z≈ë, de most a j√∂v≈ëbe akarunk l√°tni! Pontos el≈ërejelz√©st k√©r√ºnk a k√∂vetkez≈ë heti termel√©si darabsz√°mra a kapacit√°stervez√©shez.',
          task: 'Fektessetek be -10 Tanul√°si kreditet (TK) egy Regresszi√≥s modellbe, hogy teljes√≠ts√©tek a k√©r√©st! En√©lk√ºl a projekt hat√©konys√°ga jelent≈ësen cs√∂kken.',
          requirements: ['Regresszi√≥s modell'],
          benefits: ['Kapacit√°stervez√©s optimaliz√°l√°sa', 'Termel√©si el≈ërejelz√©s'],
          icon: 'üìà',
          category: 'production'
        },
        {
          id: 2,
          title: 'Energiahat√©konys√°gi optimaliz√°l√°s',
          type: 'regression',
          cost: 10,
          reward: 5,
          difficulty: 'neh√©z',
          description: 'A p√©nz√ºgyi oszt√°ly riad√≥t f√∫jt a n√∂vekv≈ë energiak√∂lts√©gek miatt! El≈ërejelz√©st kell k√©sz√≠tenetek a g√©psorok v√°rhat√≥ energiafogyaszt√°s√°r√≥l, hogy optimaliz√°lni tudjuk a felhaszn√°l√°st.',
          task: 'A kih√≠v√°s teljes√≠t√©s√©hez aktiv√°lj√°tok a Regresszi√≥s modellt -10 Tanul√°si kredit (TK) befektet√©s√©vel! En√©lk√ºl a gy√°r m≈±k√∂d√©se vesztes√©ges marad.',
          requirements: ['Regresszi√≥s modell'],
          benefits: ['Energiak√∂lts√©g cs√∂kkent√©s', 'K√∂rnyezettudatos m≈±k√∂d√©s'],
          icon: '‚ö°',
          category: 'energy'
        },
        {
          id: 3,
          title: 'Predikt√≠v karbantart√°s',
          type: 'regression',
          cost: 10,
          reward: 5,
          difficulty: 'k√∂zepes',
          description: 'V√°ratlan g√©phiba √°ll√≠totta le a teljes 3-as gy√°rt√≥sort! A vezet√©s megel≈ëz≈ë megold√°st k√∂vetel. K√©sz√≠tsetek egy modellt, ami el≈ëre jelzi a kulcsfontoss√°g√∫ alkatr√©szek h√°tral√©v≈ë √©lettartam√°t √≥r√°ban kifejezve!',
          task: 'Oldj√°tok fel a Regresszi√≥s modell k√©pess√©get -10 Tanul√°si kredit√©rt (TK), hogy megel≈ëzz√©tek a j√∂v≈ëbeli le√°ll√°sokat! A gy√°r termel√©se √©s a h√≠rnev√ºnk m√∫lik rajta.',
          requirements: ['Regresszi√≥s modell'],
          benefits: ['Le√°ll√°sok megel≈ëz√©se', 'K√∂lts√©gmegtakar√≠t√°s'],
          icon: 'üîß',
          category: 'maintenance'
        },
        {
          id: 4,
          title: 'K√©szletgazd√°lkod√°si kih√≠v√°s',
          type: 'regression',
          cost: 10,
          reward: 5,
          difficulty: 'k√∂zepes',
          description: 'Az alapanyag-k√©szlet kritikusan alacsony, ami a termel√©s le√°ll√°s√°val fenyeget! A beszerz√©si oszt√°lynak pontos el≈ërejelz√©sre van sz√ºks√©ge a k√∂vetkez≈ë havi alapanyag-sz√ºks√©gletr≈ël.',
          task: 'Fektessetek be -10 Tanul√°si kreditet (TK) egy Regresszi√≥s modellbe a pontos becsl√©shez! Ha kifogytok az alapanyagb√≥l, a k√ºldet√©s elbukik.',
          requirements: ['Regresszi√≥s modell'],
          benefits: ['Optim√°lis k√©szletszint', 'Ell√°t√°si l√°nc stabilit√°s'],
          icon: 'üì¶',
          category: 'logistics'
        }
      ];

      const { category, difficulty, type } = req.query;
      let filteredCards = eventCards;

      // Sz≈±r√©sek
      if (category) {
        filteredCards = filteredCards.filter(card => card.category === category);
      }

      if (difficulty) {
        filteredCards = filteredCards.filter(card => card.difficulty === difficulty);
      }

      if (type) {
        filteredCards = filteredCards.filter(card => card.type === type);
      }

      // Statisztik√°k
      const statistics = {
        total: eventCards.length,
        filtered: filteredCards.length,
        byCategory: {
          production: eventCards.filter(c => c.category === 'production').length,
          energy: eventCards.filter(c => c.category === 'energy').length,
          maintenance: eventCards.filter(c => c.category === 'maintenance').length,
          logistics: eventCards.filter(c => c.category === 'logistics').length
        },
        byDifficulty: {
          k√∂zepes: eventCards.filter(c => c.difficulty === 'k√∂zepes').length,
          neh√©z: eventCards.filter(c => c.difficulty === 'neh√©z').length
        },
        totalCost: eventCards.reduce((sum, card) => sum + card.cost, 0),
        totalReward: eventCards.reduce((sum, card) => sum + card.reward, 0)
      };

      res.json({
        success: true,
        message: 'Esem√©nyk√°rty√°k sikeresen lek√©rve',
        data: {
          eventCards: filteredCards,
          statistics,
          filters: {
            category: category || null,
            difficulty: difficulty || null,
            type: type || null
          }
        }
      });

    } catch (error) {
      console.error('Hiba az esem√©nyk√°rty√°k lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba az esem√©nyk√°rty√°k lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }

  // Modell inform√°ci√≥k lek√©r√©se
  static async getModelInfo(req, res) {
    try {
      const models = {
        classification: {
          id: 'classification',
          name: 'Klasszifik√°ci√≥s Modell',
          nickname: 'S√≥lyomszem',
          type: 'supervised_learning',
          cost: 15,
          description: 'A digit√°lis d√∂nt√©shoz√≥. Val√≥s id≈ëben azonos√≠tja a selejtes term√©keket a gy√°rt√≥soron.',
          capabilities: [
            'Term√©kek kategoriz√°l√°sa (Megfelel≈ë/Selejt)',
            'Hib√°s term√©kek automatikus felismer√©se',
            'Val√≥s idej≈± min≈ës√©g-ellen≈ërz√©s',
            'Gy√°rt√≥sori integr√°ci√≥'
          ],
          inputs: ['S√∫ly (g)', 'Sz√≠nk√≥d', 'M√©ret', 'H≈ëm√©rs√©klet', 'Rezg√©sszint'],
          outputs: ['Megfelel≈ë', 'Selejt'],
          accuracy: '95%',
          processingTime: '< 100ms',
          industrialApplications: [
            'Automatiz√°lt min≈ës√©g-ellen≈ërz√©s',
            'G√©pek √°llapot√°nak diagnosztiz√°l√°sa',
            'Nyomtatott √°ramk√∂ri lapok ellen≈ërz√©se'
          ],
          icon: 'üéØ',
          status: 'available'
        },
        regression: {
          id: 'regression',
          name: 'Regresszi√≥s Modell',
          nickname: 'Krist√°lyg√∂mb',
          type: 'supervised_learning',
          cost: 15,
          description: 'A j√∂v≈ëbe l√°t√≥. Numerikus √©rt√©kek pontos el≈ërejelz√©s√©re specializ√°l√≥dott modell.',
          capabilities: [
            'Termel√©si mennyis√©g el≈ërejelz√©se',
            'Energiafogyaszt√°s becsl√©se',
            'Alkatr√©sz √©lettartam predikci√≥',
            'Alapanyag-sz√ºks√©glet kalkul√°ci√≥'
          ],
          inputs: ['Historikus adatok', 'G√©p√°llapotok', 'Megrendel√©sek', 'M≈±szakbeoszt√°s'],
          outputs: ['Numerikus √©rt√©kek (darab, kWh, √≥r√°k)'],
          accuracy: '92%',
          processingTime: '< 500ms',
          industrialApplications: [
            'Predikt√≠v karbantart√°s',
            'Energiahat√©konys√°g optimaliz√°l√°s',
            'K√©szletgazd√°lkod√°s',
            'Kapacit√°stervez√©s'
          ],
          icon: 'üìà',
          status: 'available'
        }
      };

      const { modelType } = req.params;

      if (modelType && models[modelType]) {
        res.json({
          success: true,
          message: `${models[modelType].name} inform√°ci√≥k sikeresen lek√©rve`,
          data: models[modelType]
        });
      } else {
        res.json({
          success: true,
          message: 'Modell inform√°ci√≥k sikeresen lek√©rve',
          data: {
            models: Object.values(models),
            totalModels: Object.keys(models).length,
            totalCost: Object.values(models).reduce((sum, model) => sum + model.cost, 0)
          }
        });
      }

    } catch (error) {
      console.error('Hiba a modell inform√°ci√≥k lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba a modell inform√°ci√≥k lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }

  // Adatelemz√©si seg√©dletek
  static async getDataAnalysisHelpers(req, res) {
    try {
      const helpers = {
        classificationTips: [
          'A s√∫ly √©s m√©ret kombin√°ci√≥ja er≈ës indik√°tor lehet',
          'A piros sz√≠n≈±, nagy m√©ret≈± term√©kek gyakran selejtesek',
          'A k√©k sz√≠n≈±, kis m√©ret≈± term√©kek √°ltal√°ban megfelel≈ëek',
          'Figyeld meg a mint√°zatokat az adatcsomagok k√∂z√∂tt'
        ],
        regressionTips: [
          'Historikus adatok elemz√©se kulcsfontoss√°g√∫',
          'Szezon√°lis trendek figyelembev√©tele',
          'T√∂bbf√©le v√°ltoz√≥ kombin√°l√°sa jav√≠tja a pontoss√°got',
          'Outlierek kisz≈±r√©se jav√≠thatja a modell teljes√≠tm√©ny√©t'
        ],
        dataPatterns: {
          weightDistribution: {
            light: '120-160g (gyakran megfelel≈ë)',
            medium: '180-250g (vegyes)',
            heavy: '270-310g (gyakran vegyes, m√©rett≈ël f√ºgg≈ëen)'
          },
          colorPatterns: {
            piros: 'Nagy m√©retben gyakran selejt',
            k√©k: 'Kis m√©retben √°ltal√°ban megfelel≈ë',
            z√∂ld: 'K√∂zepes m√©retben jellemz≈ëen megfelel≈ë'
          },
          sizePatterns: {
            kicsi: '√Åltal√°ban megfelel≈ë, kiv√©ve ha t√∫l neh√©z',
            k√∂zepes: 'Kiegyens√∫lyozott, sz√≠nt≈ël f√ºgg≈ëen',
            nagy: 'Nagyobb es√©ly a selejtess√©gre'
          }
        },
        businessInsights: [
          'A selejt ar√°ny jelenleg ~40% (8/20 term√©k)',
          'A 2. adatcsomagban a legmagasabb a selejt ar√°ny',
          'S√∫lyoptimaliz√°l√°s jav√≠thatja a min≈ës√©get',
          'Sz√≠nk√≥dol√°s √°tgondol√°sa sz√ºks√©ges lehet'
        ]
      };

      res.json({
        success: true,
        message: 'Adatelemz√©si seg√©dletek sikeresen lek√©rve',
        data: helpers
      });

    } catch (error) {
      console.error('Hiba az adatelemz√©si seg√©dletek lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba az adatelemz√©si seg√©dletek lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }

  // Prezent√°ci√≥s template lek√©r√©se
  static async getPresentationTemplate(req, res) {
    try {
      const template = {
        title: 'Future-Tech MI Megold√°si Terv',
        duration: '2 perc',
        structure: {
          opening: {
            duration: '15 m√°sodperc',
            content: '√údv√∂zl√©s √©s csapat bemutatkoz√°s',
            example: 'Tisztelt Vezet≈ës√©g! Az [Csapat neve] nev√©ben jelentem: a k√ºldet√©st teljes√≠tett√ºk.'
          },
          classificationSolution: {
            duration: '30 m√°sodperc',
            title: 'Klasszifik√°ci√≥s megold√°s',
            modelName: 'S√≥lyomszem',
            content: 'Min≈ës√©g-ellen≈ërz√©s forradalmas√≠t√°sa',
            keyPoints: [
              'Val√≥s idej≈± selejt-felismer√©s',
              'Automatikus sz√©tv√°logat√°s',
              '100%-os min≈ës√©gi garancia'
            ]
          },
          regressionSolution: {
            duration: '30 m√°sodperc',
            title: 'Regresszi√≥s megold√°s', 
            modelName: 'Krist√°lyg√∂mb',
            content: 'J√∂v≈ëbe tekint√©s √©s el≈ërejelz√©s',
            keyPoints: [
              'Termel√©si mennyis√©g el≈ërejelz√©se',
              'Alapanyag-tervez√©s optimaliz√°l√°sa',
              'Kapacit√°smenedzsment'
            ]
          },
          synergy: {
            duration: '45 m√°sodperc',
            title: 'Modellek szinergi√°ja',
            content: 'A k√©t modell egy√ºttes hat√°sa',
            example: 'Brutt√≥ 10.000 db - 2% selejt = Nett√≥ 9.800 db piacra bocs√°that√≥ term√©k',
            benefits: [
              'Pontosabb tervez√©s',
              'K√∂lts√©goptimaliz√°l√°s',
              'Versenyel≈ëny a piacon'
            ]
          },
          closing: {
            duration: '20 m√°sodperc',
            content: 'Z√°rsz√≥ √©s implement√°ci√≥s k√©szenl√©t',
            example: 'Reakt√≠v hibakezel√©sr≈ël proakt√≠v, predikt√≠v m≈±k√∂d√©sre val√≥ √°t√°ll√°s. Implement√°ci√≥ra k√©szen √°llunk!'
          }
        },
        tips: [
          'Magabiztos √©s szakmai hangnem',
          'Konkr√©t sz√°mok √©s eredm√©nyek kiemel√©se',
          '√úzleti √©rt√©kteremt√©sre f√≥kusz√°l√°s',
          'Id≈ëkorl√°t betart√°sa'
        ],
        evaluationCriteria: [
          'Koncepci√≥k helyes haszn√°lata',
          'Terv gyakorlatiass√°ga',
          'Megmaradt TK-k sz√°ma',
          'Prezent√°ci√≥ min≈ës√©ge'
        ]
      };

      res.json({
        success: true,
        message: 'Prezent√°ci√≥s template sikeresen lek√©rve',
        data: template
      });

    } catch (error) {
      console.error('Hiba a prezent√°ci√≥s template lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba a prezent√°ci√≥s template lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }

  // Rendszer √°llapot √©s konfigur√°ci√≥k
  static async getSystemInfo(req, res) {
    try {
      const systemInfo = {
        version: '1.0.0',
        environment: process.env.NODE_ENV || 'development',
        uptime: process.uptime(),
        memoryUsage: process.memoryUsage(),
        gameConfig: {
          startingCredits: 50,
          modelCosts: {
            classification: 15,
            regression: 15
          },
          challengeCosts: {
            default: 10,
            bonus: 5
          },
          maxCredits: 100,
          minCredits: 0
        },
        apiEndpoints: {
          products: '/api/products',
          eventCards: '/api/event-cards',
          models: '/api/models',
          gameState: '/api/game-state',
          users: '/api/users'
        },
        supportedFeatures: [
          'Term√©k adatelemz√©s',
          'Esem√©nyk√°rtya kezel√©s',
          'Modell felold√°s',
          'J√°t√©k√°llapot ment√©s',
          'Felhaszn√°l√≥i profilok',
          'Rangsor rendszer',
          'Prezent√°ci√≥s modul'
        ]
      };

      res.json({
        success: true,
        message: 'Rendszer inform√°ci√≥k sikeresen lek√©rve',
        data: systemInfo
      });

    } catch (error) {
      console.error('Hiba a rendszer inform√°ci√≥k lek√©r√©se sor√°n:', error);
      res.status(500).json({
        success: false,
        error: 'Szerver hiba a rendszer inform√°ci√≥k lek√©r√©se sor√°n',
        message: error.message
      });
    }
  }
}

module.exports = DataController;
